// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	models "green_environment_app/models"

	mock "github.com/stretchr/testify/mock"
)

// RewardService is an autogenerated mock type for the RewardService type
type RewardService struct {
	mock.Mock
}

// CreateReward provides a mock function with given fields: reward
func (_m *RewardService) CreateReward(reward *models.Reward) error {
	ret := _m.Called(reward)

	if len(ret) == 0 {
		panic("no return value specified for CreateReward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Reward) error); ok {
		r0 = rf(reward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReward provides a mock function with given fields: id
func (_m *RewardService) DeleteReward(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRewards provides a mock function with given fields:
func (_m *RewardService) GetAllRewards() ([]models.Reward, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllRewards")
	}

	var r0 []models.Reward
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Reward, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Reward); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reward)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardByID provides a mock function with given fields: id
func (_m *RewardService) GetRewardByID(id uint) (*models.Reward, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardByID")
	}

	var r0 *models.Reward
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Reward, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Reward); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reward)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReward provides a mock function with given fields: reward
func (_m *RewardService) UpdateReward(reward *models.Reward) error {
	ret := _m.Called(reward)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Reward) error); ok {
		r0 = rf(reward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRewardService creates a new instance of RewardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRewardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RewardService {
	mock := &RewardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
